package com.Huard.PhoneRFFL;

import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import android.os.Looper;
import android.util.Pair;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

public class SimulationFragment extends Fragment {
    private boolean isConnected = false;  // loop through synthetic data if not connected
    public TextView lblSimulation;
    private ChannelViewModel channelViewModel;
    short[][] ADC_Values_Azimuth;
    short[][] ADC_Values_Elevation;
    private final long samplePeriod_msec = 20;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_simulation, container, false);
    }

    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        lblSimulation = view.findViewById(R.id.lblSimulation);

        channelViewModel = new ViewModelProvider(requireActivity()).get(ChannelViewModel.class);

        ConnectionViewModel connectionViewModel = new ViewModelProvider(requireActivity()).get(ConnectionViewModel.class);
        connectionViewModel.getIsConnected().observe(getViewLifecycleOwner(), this::receiveIsConnected);

        initializeSyntheticData();
        LoopSyntheticData();
    }

    private void receiveIsConnected(boolean isConnected) {
        this.isConnected = isConnected;
        showLabel(!isConnected);
    }

    private void sendAzimuthPair(Pair<Short, Short> data) {
        channelViewModel.setAzimuth(data);
    }

    private void sendElevationPair(Pair<Short, Short> data) {
        channelViewModel.setElevation(data);
    }

    private void showLabel(boolean show) {
        if (show) {
            lblSimulation.setVisibility(View.VISIBLE);
        } else {
            lblSimulation.setVisibility(View.INVISIBLE);
        }
    }

    private void initializeSyntheticData() {
        // Data from system analysis simulation
        //String[] mockADC = "441,434,421,434, 480,474,460,474, 486,470,459,470, 390,386,378,386, 485,478,469,478, 390,388,371,388, 470,461,445,461, 390,383,373,383, 502,500,493,500, 484,473,462,473, 403,396,381,396, 416,410,402,410, 473,468,455,468, 434,428,417,428, 456,453,438,453, 467,452,445,452, 402,395,384,395, 455,448,437,448, 471,457,455,457, 428,427,416,427, 432,426,418,426, 459,447,442,447, 411,404,393,404, 446,442,430,442, 445,434,423,434, 382,369,356,369, 437,428,413,428, 381,373,363,373, 414,405,396,405, 455,447,434,447, 399,395,386,395, 432,428,414,428, 423,413,398,413, 417,409,393,409, 436,430,417,430, 372,367,352,367, 444,440,438,440, 384,373,357,373, 464,455,443,455, 511,504,497,504, 415,406,392,406, 448,447,438,447, 490,483,481,483, 476,468,457,468, 520,513,502,513, 464,457,446,457, 438,431,423,431, 531,528,514,528, 500,493,482,493, 475,470,457,470, 382,374,361,374, 468,461,449,461, 494,488,472,488, 385,369,358,369, 545,534,520,534, 501,497,489,497, 388,378,365,378, 552,543,532,543, 480,474,466,474, 389,385,373,385, 478,475,466,475, 542,534,519,534, 426,417,397,417, 496,480,466,480, 397,394,384,394, 460,454,445,454, 492,491,480,491, 424,417,401,417, 477,467,457,467, 447,444,435,444, 452,445,432,445, 453,440,429,440, 483,477,469,477, 460,454,447,454, 475,468,463,468, 490,485,473,485, 393,388,372,388, 386,382,367,382, 439,433,422,433, 396,386,373,386, 452,448,435,448, 420,412,399,412, 459,447,441,447, 451,445,429,445, 477,467,453,467, 370,365,350,365, 484,476,471,476, 475,467,457,467, 446,439,432,439, 454,443,424,443, 452,444,431,444, 448,449,436,449, 485,480,468,480, 446,439,432,439, 447,444,433,444, 375,369,358,369, 465,463,453,463, 481,476,464,476, 544,535,522,535, 477,470,458,470, 543,532,521,532, 510,506,494,506, 392,387,374,387, 484,478,464,478, 546,542,530,542, 437,425,415,425, 412,407,394,407, 403,394,382,394, 446,437,422,437, 386,378,364,378, 434,424,411,424, 533,525,516,525, 420,416,409,416, 423,410,403,410, 395,391,379,391, 505,499,489,499, 386,378,359,378, 488,480,467,480, 470,462,452,462, 407,404,394,404, 462,457,445,457, 498,491,481,491, 378,372,355,372, 400,399,386,399, 507,498,488,498, 487,484,470,484, 438,430,425,430, 414,411,400,411, 476,468,459,468, 466,458,445,458, 390,378,363,378, 455,448,439,448, 421,411,392,411, 424,419,410,419, 468,461,446,461, 445,435,427,435, 469,463,458,463, 480,475,466,475, 431,426,413,426, 404,397,380,397, 484,477,463,477, 388,374,359,374, 474,465,452,465, 433,425,417,425, 466,458,447,458, 447,442,424,442, 439,438,427,438, 467,459,449,459, 405,401,390,401, 376,366,352,366, 481,474,458,474, 464,462,449,462, 449,442,429,442, 466,461,450,461, 381,377,366,377, 489,478,467,478, 430,419,409,419, 458,449,434,449, 478,470,450,470, 398,391,375,391, 492,488,475,488, 392,386,373,386, 495,488,478,488, 435,423,409,423, 430,424,415,424, 486,480,471,480, 377,366,355,366, 498,493,477,493, 399,398,382,398, 433,420,409,420, 491,478,469,478, 431,426,412,426, 449,439,430,439, 417,405,391,405, 458,450,439,450, 469,458,445,458, 381,371,358,371, 460,455,452,455, 398,391,380,391, 467,458,442,458, 404,398,387,398, 408,399,387,399, 395,388,381,388, 410,398,387,398, 422,413,402,413, 446,442,425,442, 528,521,511,521, 457,451,437,451, 514,509,498,509, 467,458,447,458, 389,381,371,381, 526,520,512,520, 423,414,404,414, 480,471,457,471, 524,513,506,513, 487,477,470,477, 519,514,508,514, 512,513,499,513, 412,405,395,405, 491,480,472,480, 439,431,423,431, 457,449,434,449, 451,443,432,443, 405,396,389,396, 452,441,430,441, 450,445,431,445, 417,407,390,407, 392,384,375,384, 386,383,370,383, 405,392,379,392, 447,437,424,437, 492,484,479,484, 372,365,353,365, 407,399,384,399, 491,485,475,485, 512,508,492,508, 457,451,435,451, 484,477,465,477, 432,429,423,429, 418,412,399,412, 482,472,467,472, 510,509,503,509, 427,420,408,420, 502,494,483,494, 464,458,446,458, 417,406,394,406, 519,511,504,511, 449,444,431,444, 499,493,485,493, 518,512,505,512, 432,432,422,432, 503,489,484,489, 476,465,453,465, 421,417,408,417, 510,503,488,503, 514,506,498,506, 528,522,509,522, 381,378,363,378, 501,497,488,497, 490,483,469,483, 481,476,468,476, 486,477,472,477, 411,398,383,398, 487,480,469,480, 461,448,439,448, 465,458,449,458, 391,379,364,379, 510,497,486,497, 464,454,443,454, 503,496,486,496, 386,378,370,378, 402,394,380,394, 459,453,444,453, 490,476,468,476, 379,366,353,366, 514,511,502,511, 409,409,397,409, 405,396,381,396, 390,380,371,380, 376,367,355,367, 498,490,486,490, 507,500,495,500, 380,370,355,370, 373,366,355,366, 487,477,468,477, 554,545,537,545, 437,429,419,429, 473,471,456,471, 549,536,527,536, 429,422,408,422, 479,477,468,477, 499,489,476,489, 496,489,476,489, 373,370,362,370, 390,381,373,381, 425,415,407,415, 526,521,508,521, 467,461,445,461, 390,380,374,380, 505,498,486,498, 452,442,432,442, 397,386,365,386, 514,502,490,502, 531,527,515,527, 436,432,423,432, 397,387,383,387, 467,458,445,458, 468,463,456,463".split(", ");
        String[] mockADC = "403,400,400,389, 413,414,414,406, 520,522,522,510, 522,524,524,509, 405,408,408,400, 500,500,500,496, 424,428,428,412, 495,500,500,487, 507,505,505,492, 453,458,458,444, 450,455,455,446, 466,471,471,457, 524,524,524,511, 455,455,455,447, 521,523,523,510, 560,560,560,551, 556,557,557,546, 450,441,441,430, 418,421,421,407, 448,451,451,443, 459,461,461,452, 434,437,437,422, 485,487,487,477, 487,491,491,477, 402,403,403,390, 426,418,418,412, 419,425,425,418, 399,404,404,396, 405,406,406,392, 515,517,517,506, 491,495,495,488, 395,398,398,393, 410,410,410,403, 426,423,423,411, 492,492,492,483, 535,538,538,527, 467,471,471,465, 474,474,474,467, 457,456,456,447, 455,454,454,441, 475,474,474,458, 464,464,464,455, 415,416,416,407, 404,400,400,390, 408,409,409,395, 452,454,454,439, 435,437,437,425, 451,450,450,439, 472,475,475,467, 395,397,397,385, 465,470,470,459, 475,475,475,468, 446,448,448,438, 430,436,436,426, 469,470,470,460, 471,475,475,465, 421,422,422,405, 401,402,402,394, 475,473,473,457, 464,466,466,457, 457,449,449,437, 467,473,473,460, 462,460,460,441, 438,441,441,438, 535,539,539,530, 538,544,544,532, 408,410,410,405, 526,529,529,519, 481,481,481,468, 497,498,498,484, 430,436,436,437, 499,500,500,492, 486,494,494,484, 494,494,494,485, 494,499,499,487, 497,497,497,488, 447,451,451,439, 502,501,501,489, 466,468,468,453, 428,431,431,412, 454,455,455,448, 476,477,477,463, 511,512,512,495, 509,510,510,500, 408,407,407,397, 415,417,417,413, 419,423,423,412, 469,465,465,452, 439,439,439,432, 444,444,444,435, 409,415,415,412, 449,453,453,443, 414,421,421,413, 444,441,441,430, 475,474,474,468, 469,470,470,460, 456,460,460,452, 464,466,466,451, 415,411,411,400, 399,397,397,382, 610,611,611,595, 582,588,588,571, 467,467,467,456, 555,559,559,551, 590,591,591,576, 477,484,484,467, 431,432,432,425, 413,416,416,406, 518,512,512,499, 482,484,484,475, 495,497,497,489, 412,423,423,417, 393,395,395,387, 510,508,508,497, 515,514,514,500, 421,423,423,410, 471,470,470,460, 467,468,468,458, 458,456,456,445, 434,440,440,426, 442,440,440,425, 419,423,423,414, 500,501,501,488, 476,471,471,457, 401,407,407,398, 462,464,464,455".split(", ");

        ADC_Values_Azimuth = new short[mockADC.length][2];
        ADC_Values_Elevation = new short[mockADC.length][2];

        for (int i=0; i<mockADC.length; i++) {
            String[] ch1ch2ch3ch4 = mockADC[i].split(",");
            short ADC1 = Short.parseShort(ch1ch2ch3ch4[0]); // CH1:  ADC1 = 16.468 * dbm1 + 1155.3
            short ADC2 = Short.parseShort(ch1ch2ch3ch4[1]); // CH2:  ADC2 = 16.461 * dbm1 + 1145.5
            short ADC3 = Short.parseShort(ch1ch2ch3ch4[2]); // CH3:  ADC3 = 16.272 * dbm3 + 1131.4
            short ADC4 = Short.parseShort(ch1ch2ch3ch4[3]); // CH4:  ADC4 = 16.014 * dbm4 + 1121

            ADC_Values_Elevation[i][0] = ADC1;
            ADC_Values_Elevation[i][1] = ADC2;
            ADC_Values_Azimuth[i][0] = ADC3;
            ADC_Values_Azimuth[i][1] = ADC4;
        }
    }

    private void LoopSyntheticData() {
        Runnable loop = () -> {
            Looper.prepare();

            for (int i = 0; i < 9999; i ++) {
                if (i >= ADC_Values_Azimuth.length)  // loop over values and repeat when done
                    i = 0;

                if (!isConnected)  // only send synthetic data when disconnected
                    sendAzimuthPair(new Pair<>(ADC_Values_Azimuth[i][0], ADC_Values_Azimuth[i][1]));

                try {
                    Thread.sleep(samplePeriod_msec); // Add a delay of 20 milliseconds between iterations
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }

                if (!isConnected)  // only send synthetic data when disconnected
                    sendElevationPair(new Pair<>(ADC_Values_Elevation[i][0], ADC_Values_Elevation[i][1]));

                try {
                    Thread.sleep(samplePeriod_msec); // Add a delay of 20 milliseconds between iterations
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        };

        new Thread(loop).start(); // Start the thread to work in Background
    }
}